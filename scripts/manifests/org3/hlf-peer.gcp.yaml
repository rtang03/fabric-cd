global:
  TZ: Asia/Hong_Kong
  mspId: Org3MSP
  domain: org3.net
  # istio ingress gateway
  istiogateway: p0o3-gateway
  istiogatewayPort: 15443

#image:
#  repository: hyperledger/fabric-peer
#  tag: 2.2.0
#  pullPolicy: IfNotPresent

persistence:
  enabled: true
  pvcName: pvc-p0o3

logging:
  # "info" or "debug" or "grpc=debug:debug" or "grpc=debug:info"
  level: info # "info"
  peer: info # info
  cauthdsl: debug # warning
  gossip: info # info
  grpc: error # error
  ledger: info
  msp: warning
  policies: warning

##################################
## Peer configuration options    #
##################################
peer:
  hostAlias:
    - hostnames:
        - orderer0.org0.com
        - orderer1.org0.com
        - orderer2.org0.com
        - orderer3.org0.com
        - orderer4.org0.com
        - peer0.org1.net
      ip: 35.202.107.80
  ledgerPath: /var/hyperledger/production
  peerName: peer0
  # orgPath: /var/hyperledger/crypto-config/Org2MSP
  # Type of database ("goleveldb" or "CouchDB"), CouchDB need fixing
  databaseType: goleveldb
  # If CouchDB is used, which chart holds it
  # couchdbInstance: p0o2db
  ## Database username
  # couchdbUsername: couchdb
  ## Database password (default: random 24 character string)
  # couchdbPassword: password
  gossip:
    # [Release Name]-hlf-peer:7051
    bootstrap: "p0o3-hlf-peer:7051"
    endpoint: "p0o3-hlf-peer:7051"
    # external url
    externalEndpoint: "peer0.org3.net:15443"
    orgLeader: "true"
    useLeaderElection: "false"
  tls:
    server:
      enabled: "true"
    client:
      enabled: "false"
  chaincode:
    # define the ccenv image used by the peer
    builder: ""
    runtime:
      golang: ""
      java: ""
      node: ""

# Secrets references, empty by default, fill in with your secrets (particularly adminCert) or add Peer Admin certificate manually after launching chart.
secrets:
  ## These secrets should contain the Orderer crypto materials and credentials
  peer:
    ## Credentials, saved under keys 'CA_USERNAME' and 'CA_PASSWORD'
    # cred: [Release Name of Root CA]-tls
    cred: "rca3-tls"
    ## Certificate, saved under key 'cert.pem'
    # cert: [external uri]-cert
    cert: "peer0.org3.net-cert"
    ## Key, saved under 'key.pem'
    # key: [external uri]-key
    key: "peer0.org3.net-key"
    ## CA Cert, saved under 'cacert.pem'
    # caCert: [external uri]-cacert
    caCert: "peer0.org3.net-cacert"
    ## Intermediate CA Cert (optional), saved under 'intermediatecacert.pem'
    # ica is not implemented yet, here reserves for future use.
    # intCaCert: hlf--peer1-caintcert
    ## TLS secret, saved under keys 'tls.crt' and 'tls.key' (to conform with K8S nomenclature)
    # tls: [external uri]-tls
    tls: "peer0.org3.net-tls"
    ## TLS root CA certificate saved under key 'cert.pem'
    # tlsRootCert: [external uri]-tlsrootcert
    tlsRootCert: "peer0.org3.net-tlsrootcert"
    ## mTls is not tested. Below reserved for future use.
    ## TLS client root CA certificates saved under any names (as there may be multiple)
    # tlsClient: hlf--peer1-tls
    ## TLS client root CA certificates saved under any names (as there may be multiple)
    # tlsClientRootCerts: hlf--ord-tlsrootcert
  ## This should contain the Certificate of the Peer Organisation admin
  ## This is necessary to successfully run the peer
  # adminCert: [external uri]-admincert
  adminCert: "peer0.org3.net-admincert"
  ## This should contain the Private Key of the Peer Organisation admin
  ## This is necessary to successfully join a channel
  # adminKey: [external uri]-adminkey
  adminKey: "peer0.org3.net-adminkey"
  ## This should include the Orderer TLS 'cacert.pem'
  ordOrg0Tlscacert: "org0.com-tlscacert"
