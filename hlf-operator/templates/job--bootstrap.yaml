{{- if .Values.bootstrap.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "hlf-operator.fullname" . }}--bootstrap
  labels:
{{- include "labels.standard" . | nindent 4 }}
spec:
  backoffLimit: 0
  parallelism: 1
  completions: 1
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      restartPolicy: Never
      {{- if .Values.bootstrap.hostAlias }}
      hostAliases:
        {{- range .Values.bootstrap.hostAlias }}
        - hostnames:
            {{- range .hostnames }}
            - {{ . }}
            {{- end }}
          ip: {{ .ip }}
        {{- end }}
      {{- end }}
      volumes:
        - name: fabricfiles
          persistentVolumeClaim:
            claimName: {{ .Values.bootstrap.pvcName }}
        - name: setup-script
          configMap:
            name: {{ .Values.global.config.setupsh }}
            defaultMode: 0777
        - name: core-yaml
          configMap:
            name: {{ .Values.global.config.coreyaml }}
        - name: org0-tls-ca-cert
          secret:
            secretName: {{ .Values.bootstrap.secret.tlscacert }}
        {{- if .Values.bootstrap.secret.channeltx }}
        - name: channel-tx
          secret:
            secretName: {{ .Values.bootstrap.secret.channeltx }}
        {{- end }}
        - name: collection-json
          configMap:
            name: {{ include "hlf-operator.fullname" . }}--cli
            items:
              - key: connection.json
                path: connection.json
        - name: metadata-json
          configMap:
            name: {{ include "hlf-operator.fullname" . }}--cli
            items:
              - key: metadata.json
                path: metadata.json
      containers:
        - name: bootstrap
          image: library/alpine:3.12.0
          tty: true
          command: ["sh", "-c"]
          args:
            - |-
              . /script/setup.sh
              apk update
              apk upgrade
              apk --no-cache add libc6-compat libstdc++ jq tzdata
              ./bin/peer version
              export DIR={{ .Values.global.workingDir }}/crypto-config/channel-artifacts
          {{- if .Values.bootstrap.tasks.create_channel.enabled}}
              printHeader "Create channel"
              echo "Fetch block to see if channel has already been created..."
              set -x
              ${BIN}/peer channel fetch 0 -c ${CHANNEL_NAME} --tls --cafile ${ORDERER_CA} -o ${ORDERER_URL} $DIR/${CHANNEL_NAME}.block
              set +x
              if [ -f $DIR/${CHANNEL_NAME}.block ]
              then
                echo "Channel ${CHANNEL_NAME} is already created."
              else
                echo "Creating Channel ${CHANNEL_NAME}"
                set -x
                ${BIN}/peer channel create -o ${ORDERER_URL} -c ${CHANNEL_NAME} \
                  -f $DIR/channeltx/channel.tx \
                  --outputBlock $DIR/${CHANNEL_NAME}.block \
                  --tls --cafile ${ORDERER_CA} >& $DIR/log-createchannel.txt
                res=$?
                set +x
                printMessage "create channel" $res
                cat $DIR/log-createchannel.txt
              fi
          {{- end }}
          {{- if .Values.bootstrap.tasks.join_channel.enabled }}
              printHeader "Join channel"
              set -x
              ${BIN}/peer channel join -b $DIR/${CHANNEL_NAME}.block >& $DIR/log-joinchannel.txt
              res=$?
              set +x
              printMessage "join channel" $res
              cat $DIR/log-joinchannel.txt
          {{- end }}
          {{- if .Values.bootstrap.tasks.getchannnelinfo.enabled }}
              set -x
              ${BIN}/peer channel getinfo -c ${CHANNEL_NAME}
              set +x
          {{- end }}
          {{- if .Values.bootstrap.tasks.update_anchor_peer.enabled }}
              printHeader "Update anchor peer"
              set -x
              ${BIN}/peer channel fetch config $DIR/config_block.pb \
                -o ${ORDERER_URL} -c ${CHANNEL_NAME} \
                --tls --cafile ${ORDERER_CA} >& $DIR/log-fetchconfig.txt
              res=$?
              set +x
              printMessage "fetch config_block.pb" $res
              cat $DIR/log-fetchconfig.txt
              set -x
              ${BIN}/configtxlator proto_decode --input $DIR/config_block.pb --type common.Block --output $DIR/config_block.json
              res=$?
              set +x
              printMessage "decode block0" $res
              set -x
              jq .data.data[0].payload.data.config $DIR/config_block.json > $DIR/config.json
              res=$?
              set +x
              printMessage "jq extract channel" $res
              set -x
              cp $DIR/config.json $DIR/config_copy.json
              res=$?
              set +x
              printMessage "cp block" $res
              set -x
              jq ".channel_group.groups.Application.groups.{{ .Values.bootstrap.tasks.update_anchor_peer.mspId }}.values += {\"AnchorPeers\":{\"mod_policy\":\"Admins\",\"value\":{\"anchor_peers\":[{\"host\":\"{{ .Values.bootstrap.tasks.update_anchor_peer.host }}\",\"port\":{{ .Values.bootstrap.tasks.update_anchor_peer.port }}}]},\"version\":\"0\"}}" $DIR/config_copy.json > $DIR/modified_config.json
              res=$?
              set +x
              printMessage "jq add anchorpeer" $res
              set -x
              ${BIN}/configtxlator proto_encode --input $DIR/config.json --type common.Config --output $DIR/config.pb
              res=$?
              set +x
              printMessage "encode current block" $res
              set -x
              ${BIN}/configtxlator proto_encode --input $DIR/modified_config.json --type common.Config --output $DIR/modified_config.pb
              res=$?
              set +x
              printMessage "encode new block" $res
              set -x
              ${BIN}/configtxlator compute_update --channel_id ${CHANNEL_NAME} --original $DIR/config.pb --updated $DIR/modified_config.pb --output $DIR/config_update.pb
              res=$?
              set +x
              printMessage "compute update block" $res
              set -x
              ${BIN}/configtxlator proto_decode --input $DIR/config_update.pb --type common.ConfigUpdate --output $DIR/config_update.json
              res=$?
              set +x
              printMessage "decode update block" $res
              echo "{\"payload\":{\"header\":{\"channel_header\":{\"channel_id\":\"$CHANNEL_NAME\", \"type\":2}},\"data\":{\"config_update\":$(cat $DIR/config_update.json)}}}" \
                | jq . > $DIR/config_update_in_envelope.json
              res=$?
              set +x
              printMessage "create update_envelope" $res
              set -x
              ${BIN}/configtxlator proto_encode --input $DIR/config_update_in_envelope.json --type common.Envelope --output $DIR/config_update_in_envelope.pb
              res=$?
              set +x
              printMessage "encode update_envelope" $res
              set -x
              ${BIN}/peer channel update -f $DIR/config_update_in_envelope.pb -o ${ORDERER_URL} -c ${CHANNEL_NAME} --tls --cafile ${ORDERER_CA} >& $DIR/log-updateanchorpeer.txt
              res=$?
              set +x
              printMessage "send update_envelope proposal" $res
              cat $DIR/log-updateanchorpeer.txt
          {{- end }}
          {{- if .Values.bootstrap.tasks.package_chaincode.enabled }}
              printHeader "package chaincode"
              set -x
              mkdir $DIR/packaging
              cp /builders/packaging/connection.json $DIR/packaging
              res=$?
              set +x
              printMessage "copy connection.json" $res
              set -x
              cp /builders/packaging/metadata.json $DIR/packaging
              res=$?
              set +x
              printMessage "copy metadata.json" $res
              cd $DIR/packaging
              set -x
              tar cfz code.tar.gz connection.json
              res=$?
              set +x
              printMessage "tar code.tar.gz" $res
              set -x
              tar cfz {{ .Values.bootstrap.chaincode.id }}.tgz code.tar.gz metadata.json
              res=$?
              set +x
              printMessage "package chaincode" $res
          {{- end }}
          {{- if .Values.bootstrap.tasks.install_chaincode.enabled }}
              printHeader "install chaincode"
              set -x
              echo "installation will take a few minutes"
              ${BIN}/peer lifecycle chaincode install $DIR/packaging/{{ .Values.bootstrap.chaincode.id }}.tgz >& $DIR/log-install.txt
              res=$?
              set +x
              printMessage "install chaincode" $res
              cat $DIR/log-install.txt
          {{- end }}
          {{- if .Values.bootstrap.tasks.queryinstalled.enabled }}
              printHeader "queryinstalled"
              set -x
              ${BIN}/peer lifecycle chaincode queryinstalled >& $DIR/log-installed.txt
              res=$?
              set +x
              printMessage "query installed chaincode" $?
              cat $DIR/log-installed.txt
              set -x
              sed -n "/{{ .Values.bootstrap.chaincode.id }}v{{ .Values.bootstrap.chaincode.version }}/{s/^Package ID: //; s/, Label:.*$//; p;}" $DIR/log-installed.txt > $DIR/packageid.txt
              res=$?
              set +x
              printMessage "make packageid.txt" $res
              cat $DIR/packageid.txt
          {{- end }}
          {{- if .Values.bootstrap.tasks.approve_chaincode.enabled }}
              printHeader "approve chaincode"
              set -x
              ${BIN}/peer lifecycle chaincode approveformyorg \
                -o ${ORDERER_URL} -C ${CHANNEL_NAME} \
                --tls --cafile ${ORDERER_CA} \
                --name {{ .Values.bootstrap.chaincode.id }} \
                --version {{ .Values.bootstrap.chaincode.version }} \
                --package-id $(sed -n "/{{ .Values.bootstrap.chaincode.id }}v{{ .Values.bootstrap.chaincode.version }}/{s/^Package ID: //; s/, Label:.*$//; p;}" $DIR/log-installed.txt) \
                --init-required \
                --sequence {{ .Values.bootstrap.tasks.approve_chaincode.sequence }} \
                --waitForEvent >& $DIR/log-approvecc.txt
              res=$?
              set +x
              printMessage "approve chaincode" $res
              cat  $DIR/log-approvecc.txt
          {{- end }}
          {{- if .Values.bootstrap.tasks.queryapproved.enabled }}
              printHeader "queryapproved"
              set -x
              ${BIN}/peer lifecycle chaincode queryapproved -C ${CHANNEL_NAME} -n {{ .Values.bootstrap.chaincode.id }}
              res=$?
              set +x
              printMessage "query approvedchaincode" $res
          {{- end }}
          {{- if .Values.bootstrap.tasks.checkcommitreadiness.enabled }}
              printHeader "checkcommitreadiness"
              set -x
              ${BIN}/peer lifecycle chaincode checkcommitreadiness \
                -o ${ORDERER_URL} -C ${CHANNEL_NAME} \
                --tls --cafile ${ORDERER_CA} \
                --name {{ .Values.bootstrap.chaincode.id }} \
                --version {{ .Values.bootstrap.chaincode.version }} \
                --init-required \
                --sequence {{ .Values.bootstrap.tasks.approve_chaincode.sequence }} >& $DIR/log-commitreadiness.txt
              res=$?
              set +x
              printMessage "checkcommitreadiness" $res
              cat $DIR/log-commitreadiness.txt
          {{- end }}
          {{- if .Values.bootstrap.tasks.commit_chaincode.enabled }}
              printHeader "commit chaincode"
              set -x
              ${BIN}/peer lifecycle chaincode commit \
                -o ${ORDERER_URL} -C ${CHANNEL_NAME} \
                --tls --cafile ${ORDERER_CA} \
                --name {{ .Values.bootstrap.chaincode.id }} \
                --version {{ .Values.bootstrap.chaincode.version }} \
                --init-required \
                --sequence {{ .Values.bootstrap.tasks.approve_chaincode.sequence }} \
              {{- range .Values.bootstrap.tasks.commit_chaincode.targets }}
                --peerAddresses {{ .peerAddress }} \
                --tlsRootCertFiles {{ .tlsRootCertFiles }} \
              {{- end }}
                --waitForEvent >& $DIR/log-commitcc.txt
              res=$?
              set +x
              printMessage "commit chaincode" $res
              cat $DIR/log-commitcc.txt
          {{- end }}
          {{- if .Values.bootstrap.tasks.querycommitted.enabled }}
              printHeader "querycommitted chaincode"
              set -x
              ${BIN}/peer lifecycle chaincode querycommitted \
                -o ${ORDERER_URL} -C ${CHANNEL_NAME} \
                --tls --cafile ${ORDERER_CA} \
              {{- range .Values.bootstrap.tasks.querycommitted.targets }}
                --peerAddresses {{ .peerAddress }} \
                --tlsRootCertFiles {{ .tlsRootCertFiles }} \
              {{- end }}
                --name {{ .Values.bootstrap.chaincode.id }} >& $DIR/log-querycommitted.txt
              res=$?
              set +x
              printMessage "querycommitted chaincode" $res
              cat $DIR/log-querycommitted.txt
          {{- end }}
          {{- if .Values.bootstrap.tasks.init_chaincode.enabled }}
              printHeader "init chaincode"
              set -x
              ${BIN}/peer chaincode invoke --isInit \
                -o ${ORDERER_URL} -C ${CHANNEL_NAME} \
                --tls --cafile ${ORDERER_CA} \
                --name {{ .Values.bootstrap.chaincode.id }} \
                -c '{"Args":["Init"]}' \
              {{- range .Values.bootstrap.tasks.init_chaincode.targets }}
                --peerAddresses {{ .peerAddress }} \
                --tlsRootCertFiles {{ .tlsRootCertFiles }} \
              {{- end }}
                --waitForEvent >& $DIR/log-initcc.txt
              res=$?
              set +x
              # printMessage "init chaincode" $res
              cat $DIR/log-initcc.txt
              #  -c '{"function":"{{ .Values.bootstrap.chaincode.contract }}:Init","Args":[]}' \
              {{- end }}
          {{- if .Values.bootstrap.tasks.dev_invoke.enabled }}
              printHeader "dev-invoke"
              set -x
              ${BIN}/peer chaincode invoke -o ${ORDERER_URL} -C ${CHANNEL_NAME} --tls --cafile ${ORDERER_CA} --name {{ .Values.bootstrap.chaincode.id }} \
                -c '{"Args":["createCommit", "dev_entity", "ent_dev", "0","[]", "ent_dev"]}' \
              {{- range .Values.bootstrap.tasks.dev_invoke.targets }}
                --peerAddresses {{ .peerAddress }} \
                --tlsRootCertFiles {{ .tlsRootCertFiles }} \
              {{- end }}
                --waitForEvent \
                --waitForEventTimeout 300s >& $DIR/log-devinvoke.txt
              res=$?
              set +x
              printMessage "dev-invoke" $res
              cat $DIR/log-devinvoke.txt
          {{- end }}
          {{- if .Values.bootstrap.tasks.dev_query.enabled }}
              printHeader "dev-query"
              set -x
              ${BIN}/peer chaincode query -C ${CHANNEL_NAME} --tls --cafile ${ORDERER_CA} --name {{ .Values.bootstrap.chaincode.id }} \
                -c '{"Args":["eventstore:queryByEntityName","dev_entity"]}' >& $DIR/log-devquery.txt
              res=$?
              set +x
              printMessage "dev-query" $res
              cat $DIR/log-devquery.txt
          {{- end }}
              #  -c "{\"function\":\"{{ .Values.bootstrap.chaincode.contract }}:Init\",\"Args\":[]}" \
          workingDir: {{ .Values.global.workingDir }}
          envFrom:
            - configMapRef:
                name: {{ include "hlf-operator.fullname" . }}--cli
          volumeMounts:
            - mountPath: /var/hyperledger
              name: fabricfiles
            - mountPath: /etc/hyperledger
              name: core-yaml
            - name: setup-script
              mountPath: /script/setup.sh
              subPath: setup.sh
            {{- if .Values.bootstrap.secret.channeltx }}
            - name: channel-tx
              mountPath: {{ .Values.global.workingDir }}/crypto-config/channel-artifacts/channeltx
            {{- end }}
            - name: org0-tls-ca-cert
              mountPath: {{ .Values.global.workingDir }}/crypto-config/channel-artifacts/org0-tls-ca-cert
            - name: collection-json
              mountPath: /builders/packaging/connection.json
              subPath: connection.json
            - name: metadata-json
              mountPath: /builders/packaging/metadata.json
              subPath: metadata.json
{{- end }}
