{{- if .Values.neworg.enabled }}
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: neworg-config-update
spec:
  activeDeadlineSeconds: 600
  ttlStrategy:
    secondsAfterCompletion: 3600 # Time to live after workflow is completed, replaces ttlSecondsAfterFinished
    secondsAfterSuccess: 3600     # Time to live after workflow is successful
    secondsAfterFailure: 3600     # Time to live after workflow fails
  serviceAccountName: workflow
  entrypoint: main

  templates:
    - name: main
      inputs:
        parameters:
          - name: config_block_json
          - name: channelname
          - name: cacert
          - name: outfile
          - name: url
      steps:
        - - name: neworg
            template: neworg-tmpl
            arguments:
              parameters:
                - name: config_block_json
                  value: {{ .Values.alias.input_config_block_json | quote }}
                - name: channelname
                  value: {{ .Values.alias.input_channelname | quote }}
        - - name: gupload
            templateRef:
              name: gupload-up-file
              template: upload-tmpl
              clusterScope: false
            arguments:
              parameters:
                - name: cacert
                  value: {{ .Values.alias.input_cacert | quote }}
                - name: url
                  value: {{ .Values.alias.input_url | quote }}
                - name: infile
                  value: "config_update_in_envelope.pb"
                - name: outfile
                  value: {{ .Values.alias.input_outfile | quote }}
                - name: pvc_gupload
                  value: {{ .Values.pvc_gupload }}

    - name: neworg-tmpl
{{ toYaml .Values.no_istio | indent 6 }}
      inputs:
        parameters:
          - name: config_block_json
          - name: channelname
      volumes:
        - name: gupload
          persistentVolumeClaim:
            claimName: {{ .Values.pvc_gupload }}
        - name: fabricfiles
          persistentVolumeClaim:
            claimName: {{ .Values.pvc_fabricfiles }}
        - name: setup-script
          configMap:
            name: "orgadmin--setupsh"
            defaultMode: 0755
        - name: core-yaml
          configMap:
            name: core-yaml
        - name: configtx-yaml
          configMap:
            name: orgadmin-configtx
      container:
        image: library/alpine:3.12.0
        command: ["sh", "-c"]
        workingDir: /var/hyperledger
        args:
          - |-
            CHANNEL_NAME={{ .Values.alias.input_channelname | quote }}
            FABRIC_CFG_PATH=/etc/hyperledger
            CONFIG={{ .Values.alias.input_config_block_json | quote }}
            . /script/setup.sh
            apk update
            apk upgrade
            apk --no-cache add libc6-compat libstdc++ jq
            ./bin/peer version
            touch /tmp/result
            if [ -f "/mnt/$CONFIG" ]
            then
              echo "$CONFIG exists"
            else
              printMessage "find config.json" 1
            fi
            printHeader "step 1: generate channel definition"
            sleep 1
            set -x
            ./bin/configtxgen -configPath /configtx -printOrg {{ .Values.mspId }} > /tmp/{{ .Values.mspId }}-configtx.json
            res=$?
            set +x
            printMessage "generate channel definition" $res
            printHeader "step 2: modify config to append new org"
            sleep 1
            set -x
            jq -s '.[0] * {"channel_group":{"groups":{"Application":{"groups": {"{{ .Values.mspId }}":.[1]}}}}}' /mnt/$CONFIG /tmp/{{ .Values.mspId }}-configtx.json > /tmp/modified_config.json
            res=$?
            set +x
            printMessage "modify config to append new org: {{ .Values.mspId }}" $res
            printHeader "step 3: encode config.json to config.pb"
            sleep 1
            set -x
            ./bin/configtxlator proto_encode --input /mnt/$CONFIG --type common.Config --output /tmp/config.pb
            res=$?
            set +x
            printMessage "encode config.json to config.pb" $res
            printHeader "step 4: encode modified_config.json to modified_config.pb"
            sleep 1
            set -x
            ./bin/configtxlator proto_encode --input /tmp/modified_config.json --type common.Config --output /tmp/modified_config.pb
            res=$?
            set +x
            printMessage "encode modified_config.json to modified_config.pb" $res
            printHeader "step 5: compute update block"
            sleep 1
            set -x
            ./bin/configtxlator compute_update --channel_id $CHANNEL_NAME --original /tmp/config.pb --updated /tmp/modified_config.pb --output /tmp/config_update.pb >& /tmp/compute_update.log
            res=$?
            set +x
            # when the current org has already joined channel will return below error
            # > configtxlator: error: Error computing update: error computing config update: no differences detected between original and updated config
            CHECK=$(grep "no differences" "/tmp/compute_update.log")
            if [ -z $CHECK ]; then
            else
              echo "no-difference" > /tmp/result
            fi
            printMessage "compute update block" $res
            printHeader "step 6: decode update block"
            set -x
            ./bin/configtxlator proto_decode --input /tmp/config_update.pb --type common.ConfigUpdate | jq . > /tmp/config_update.json
            res=$?
            set +x
            printMessage "decode update block" $res
            printHeader "step 7: create update_envelope"
            sleep 1
            set -x
            echo "{\"payload\":{\"header\":{\"channel_header\":{\"channel_id\":\"$CHANNEL_NAME\", \"type\":2}},\"data\":{\"config_update\":$(cat /tmp/config_update.json)}}}" | jq . > /tmp/config_update_in_envelope.json
            res=$?
            set +x
            printMessage "create update_envelope" $res
            printHeader "step 8: encode update_envelope"
            sleep 1
            set -x
            ./bin/configtxlator proto_encode --input /tmp/config_update_in_envelope.json --type common.Envelope --output /tmp/config_update_in_envelope.pb
            res=$?
            set +x
            printMessage "encode update_envelope" $res
            set -x
            cp /tmp/config_update_in_envelope.pb /mnt
            printMessage "copy config_update_in_envelope.pb" $?
        envFrom:
          - configMapRef:
              name: orgadmin--cli
        volumeMounts:
          - mountPath: /mnt
            name: gupload
          - mountPath: /var/hyperledger
            name: fabricfiles
          - name: setup-script
            mountPath: /script/setup.sh
            subPath: setup.sh
          - name: configtx-yaml
            mountPath: /configtx
          - mountPath: /etc/hyperledger
            name: core-yaml
      outputs:
        parameters:
          - name: result
            valueFrom:
              path: "/tmp/result"
        artifacts:
          - name: neworg
            path: /tmp/
            archive:
              none: {}
            s3:
              key: workflow/{{ .Values.alias.workflow_name }}/{{ .Values.mspId | lower }}/neworg/
              {{- with .Values.s3 }}
{{ toYaml . | indent 14 }}
              {{- end }}
{{- end }}
