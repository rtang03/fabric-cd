apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: argocd-cli
spec:
  activeDeadlineSeconds: 600
  ttlStrategy:
    secondsAfterCompletion: 3600 # Time to live after workflow is completed, replaces ttlSecondsAfterFinished
    secondsAfterSuccess: 3600     # Time to live after workflow is successful
    secondsAfterFailure: 3600     # Time to live after workflow fails
  serviceAccountName: workflow
  entrypoint: argocd-app-sync

  templates:
    - name: argocd-app-sync
{{ toYaml .Values.no_istio | indent 6 }}
      {{- if .Values.hostAlias }}
      hostAliases:
        {{- range .Values.hostAlias }}
        - hostnames:
            {{- range .hostnames }}
            - {{ . }}
          {{- end }}
          ip: {{ .ip }}
      {{- end }}
      {{- end }}
      inputs:
        parameters:
          - name: app
      container:
        image: library/alpine:3.12.0
        command: ["sh", "-c"]
        args:
          - |-
            ARGOCD_SERVER={{ .Values.argocdServerUrl }}
            apk update
            apk upgrade
            apk --no-cache add libc6-compat libstdc++ curl
            ### Checking ENV
            if [ -z $ARGOCD_SERVER ]; then
              echo "env ARGO_SERVER"
              exit 1
            else
              echo "ArgoCD Server: $ARGOCD_SERVER"
            fi
            if [ -z $ARGOCD_AUTH_TOKEN ]; then
              echo "load env: ARGOCD_AUTH_TOKEN"
              exit 1
            else
              echo "ARGOCD_AUTH_TOKEN found"
            fi
            ### Download argocd binary ####
            set -x
            curl -sSL -o /usr/local/bin/argocd http://${ARGOCD_SERVER}/download/argocd-linux-amd64
            res=$?
            set +x
            if [ $res -ne 0 ]; then
              echo "fail to load argocd binary"
              exit $res
            fi
            chmod +x /usr/local/bin/argocd
            ### Argocd App Sync: {{ .Values.alias.input_app | quote }} ###
            set -x
            # TODO: change to TLS
            argocd version --server "${ARGOCD_SERVER}:80" --grpc-web --plaintext
            res=$?
            set +x
            if [ $res -ne 0 ]; then
              echo "fail to print version"
              exit $res
            fi
            set -x
            argocd account get --server "${ARGOCD_SERVER}:80" --grpc-web --plaintext
            argocd app sync {{ .Values.alias.input_app | quote }} --server "${ARGOCD_SERVER}:80" --grpc-web --plaintext
            res=$?
            set +x
            if [ $res -ne 0 ]; then
              echo "fail to sync app"
              exit $res
            fi
            set -x
            argocd app wait {{ .Values.alias.input_app | quote }} --server "${ARGOCD_SERVER}:80" --grpc-web --plaintext --timeout 600
            res=$?
            set +x
            if [ $res -ne 0 ]; then
              echo "fail to wait to finish"
              exit $res
            fi
        env:
          - name: ARGOCD_AUTH_TOKEN
            valueFrom:
              secretKeyRef:
                name: argocd-cli-jwt
                key: jwt
