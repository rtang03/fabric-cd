apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "hlf-peer.fullname" . }}--ccbin
  labels:
{{- include "labels.standard" . | nindent 4 }}
data:
  detect: |
    #!/bin/sh
    # The bin/detect script is responsible for determining whether or not a buildpack
    # should be used to build a chaincode package and launch it.
    #
    # The peer invokes detect with two arguments:
    # bin/detect CHAINCODE_SOURCE_DIR CHAINCODE_METADATA_DIR
    #
    # When detect is invoked, CHAINCODE_SOURCE_DIR contains the chaincode source and
    # CHAINCODE_METADATA_DIR contains the metadata.json file from the chaincode package installed to the peer.
    # The CHAINCODE_SOURCE_DIR and CHAINCODE_METADATA_DIR should be treated as read only inputs.
    # If the buildpack should be applied to the chaincode source package, detect must return an exit code of 0;
    # any other exit code will indicate that the buildpack should not be applied.
    CHAINCODE_METADATA_DIR="$2"
    set -euo pipefail
    # use jq to extract the chaincode type from metadata.json and exit with
    # success if the chaincode type is golang
    if [ "$(cat "$CHAINCODE_METADATA_DIR/metadata.json" | sed -e 's/[{}]/''/g' | awk -F"[,:}]" '{for(i=1;i<=NF;i++){if($i~/'type'\042/){print $(i+1)}}}' | tr -d '"')" = "external" ]; then
        exit 0
    fi
    exit 1
  build: |
    #!/bin/sh
    # The bin/build script is responsible for building, compiling, or transforming the contents
    # of a chaincode package into artifacts that can be used by release and run.
    #
    # The peer invokes build with three arguments:
    # bin/build CHAINCODE_SOURCE_DIR CHAINCODE_METADATA_DIR BUILD_OUTPUT_DIR
    #
    # When build is invoked, CHAINCODE_SOURCE_DIR contains the chaincode source and
    # CHAINCODE_METADATA_DIR contains the metadata.json file from the chaincode package installed to the peer.
    # BUILD_OUTPUT_DIR is the directory where build must place artifacts needed by release and run.
    # The build script should treat the input directories CHAINCODE_SOURCE_DIR and
    # CHAINCODE_METADATA_DIR as read only, but the BUILD_OUTPUT_DIR is writeable.
    CHAINCODE_SOURCE_DIR="$1"
    CHAINCODE_METADATA_DIR="$2"
    BUILD_OUTPUT_DIR="$3"
    set -euo pipefail
    #external chaincodes expect connection.json file in the chaincode package
    if [ ! -f "$CHAINCODE_SOURCE_DIR/connection.json" ]; then
        >&2 echo "$CHAINCODE_SOURCE_DIR/connection.json not found"
        exit 1
    fi
    #simply copy the endpoint information to specified output location
    cp $CHAINCODE_SOURCE_DIR/connection.json $BUILD_OUTPUT_DIR/connection.json
    if [ -d "$CHAINCODE_SOURCE_DIR/metadata" ]; then
        cp -a $CHAINCODE_SOURCE_DIR/metadata $BUILD_OUTPUT_DIR/metadata
    fi
    exit 0
  release: |
    #!/bin/sh
    # The bin/release script is responsible for providing chaincode metadata to the peer.
    # bin/release is optional. If it is not provided, this step is skipped.
    #
    # The peer invokes release with two arguments:
    # bin/release BUILD_OUTPUT_DIR RELEASE_OUTPUT_DIR
    #
    # When release is invoked, BUILD_OUTPUT_DIR contains the artifacts
    # populated by the build program and should be treated as read only input.
    # RELEASE_OUTPUT_DIR is the directory where release must place artifacts to be consumed by the peer.
    set -euo pipefail
    BUILD_OUTPUT_DIR="$1"
    RELEASE_OUTPUT_DIR="$2"
    # copy indexes from metadata/* to the output directory
    # if [ -d "$BUILD_OUTPUT_DIR/metadata" ] ; then
    #    cp -a "$BUILD_OUTPUT_DIR/metadata/"* "$RELEASE_OUTPUT_DIR/"
    # fi
    #external chaincodes expect artifacts to be placed under "$RELEASE_OUTPUT_DIR"/chaincode/server
    if [ -f $BUILD_OUTPUT_DIR/connection.json ]; then
    mkdir -p "$RELEASE_OUTPUT_DIR"/chaincode/server
    cp $BUILD_OUTPUT_DIR/connection.json "$RELEASE_OUTPUT_DIR"/chaincode/server
    #if tls_required is true, copy TLS files (using above example, the fully qualified path for these fils would be "$RELEASE_OUTPUT_DIR"/chaincode/server/tls)
    exit 0
    fi
    exit 1
  core.yaml: |
    peer:
      id: cli
      networkId: nid1
      listenAddress: 0.0.0.0:7051
      # chaincodeListenAddress: 0.0.0.0:7052
      # chaincodeAddress: 0.0.0.0:7052
      address: 0.0.0.0:7051
      addressAutoDetect: false
      keepalive:
        interval: 7200s
        timeout: 20s
        minInterval: 60s
        client:
          interval: 60s
          timeout: 20s
        deliveryClient:
          interval: 60s
          timeout: 20s
      gossip:
        bootstrap: 127.0.0.1:7051
        useLeaderElection: true
        orgLeader: false
        membershipTrackerInterval: 5s
        endpoint:
        maxBlockCountToStore: 100
        maxPropagationBurstLatency: 10ms
        maxPropagationBurstSize: 10
        propagateIterations: 1
        propagatePeerNum: 3
        pullInterval: 4s
        pullPeerNum: 3
        requestStateInfoInterval: 4s
        publishStateInfoInterval: 4s
        stateInfoRetentionInterval:
        publishCertPeriod: 10s
        skipBlockVerification: false
        dialTimeout: 3s
        connTimeout: 2s
        recvBuffSize: 20
        sendBuffSize: 200
        digestWaitTime: 1s
        requestWaitTime: 1500ms
        responseWaitTime: 2s
        aliveTimeInterval: 5s
        aliveExpirationTimeout: 25s
        reconnectInterval: 25s
        externalEndpoint:
        election:
          startupGracePeriod: 15s
          membershipSampleInterval: 1s
          leaderAliveThreshold: 10s
          leaderElectionDuration: 5s
        pvtData:
          pullRetryThreshold: 60s
          transientstoreMaxBlockRetention: 1000
          pushAckTimeout: 3s
          btlPullMargin: 10
          reconcileBatchSize: 10
          reconcileSleepInterval: 1m
          reconciliationEnabled: true
          skipPullingInvalidTransactionsDuringCommit: false
          implicitCollectionDisseminationPolicy:
            requiredPeerCount: 0
            maxPeerCount: 1
        state:
          enabled: true
          checkInterval: 10s
          responseTimeout: 3s
          batchSize: 10
          blockBufferSize: 100
          maxRetries: 3
      tls:
        enabled:  false
        clientAuthRequired: false
        cert:
          file: tls/server.crt
        key:
          file: tls/server.key
        rootcert:
          file: tls/ca.crt
        clientRootCAs:
          files:
            - tls/ca.crt
        clientKey:
          file:
        clientCert:
          file:
      authentication:
        timewindow: 15m
      fileSystemPath: /var/hyperledger/production
      BCCSP:
        Default: SW
        SW:
          Hash: SHA2
          Security: 256
          FileKeyStore:
            KeyStore:
        PKCS11:
          Library:
          Label:
          Pin:
          Hash:
          Security:
      mspConfigPath: msp
      localMspId: SampleOrg
      client:
        connTimeout: 3s
      deliveryclient:
        reconnectTotalTimeThreshold: 3600s
        connTimeout: 3s
        reConnectBackoffThreshold: 3600s
        addressOverrides:
        #  - from:
        #    to:
        #    caCertsFile:
        #  - from:
        #    to:
        #    caCertsFile:

      # Type for the local MSP - by default it's of type bccsp
      localMspType: bccsp
      profile:
        enabled:     false
        listenAddress: 0.0.0.0:6060
      handlers:
        authFilters:
          -
            name: DefaultAuth
          -
            name: ExpirationCheck    # This filter checks identity x509 certificate expiration
        decorators:
          -
            name: DefaultDecorator
        endorsers:
          escc:
            name: DefaultEndorsement
            library:
        validators:
          vscc:
            name: DefaultValidation
            library:

      validatorPoolSize:
      discovery:
        enabled: true
        authCacheEnabled: true
        authCacheMaxSize: 1000
        authCachePurgeRetentionRatio: 0.75
        orgMembersAllowedAccess: false
      limits:
        concurrency:
          endorserService: 2500
          deliverService: 2500
    vm:
      # Endpoint of the vm management system.  For docker can be one of the following in general
      # unix:///var/run/docker.sock
      # http://localhost:2375
      # https://localhost:2376
      endpoint: unix:///var/run/docker.sock
      docker:
        tls:
          enabled: false
          ca:
            file: docker/ca.crt
          cert:
            file: docker/tls.crt
          key:
            file: docker/tls.key
        attachStdout: false
        # standard values are: `host`(default),`bridge`,`ipvlan`,`none`.
        # Dns - a list of DNS servers for the container to use.
        # Note:  `Privileged` `Binds` `Links` and `PortBindings` properties of
        # Docker Host Config are not supported and will not be used if set.
        # LogConfig - sets the logging driver (Type) and related options
        # (Config) for Docker. For more info,
        # https://docs.docker.com/engine/admin/logging/overview/
        # Note: Set LogConfig using Environment Variables is not supported.
        hostConfig:
          NetworkMode: host
          Dns:
          # - 192.168.0.1
          LogConfig:
            Type: json-file
            Config:
              max-size: "50m"
              max-file: "5"
          Memory: 2147483648
    chaincode:
      id:
        path:
        name:
      builder: $(DOCKER_NS)/fabric-ccenv:$(TWO_DIGIT_VERSION)
      pull: false
      golang:
        runtime: $(DOCKER_NS)/fabric-baseos:$(TWO_DIGIT_VERSION)
        dynamicLink: false
      java:
        runtime: $(DOCKER_NS)/fabric-javaenv:$(TWO_DIGIT_VERSION)
      node:
        runtime: $(DOCKER_NS)/fabric-nodeenv:$(TWO_DIGIT_VERSION)
      externalBuilders:
        - name: external-builder
          path: /builders/external
          environmentWhitelist:
          - GOPROXY
        # - path: /path/to/directory
        #   name: descriptive-builder-name
        #   environmentWhitelist:
      #      - ENVVAR_NAME_TO_PROPAGATE_FROM_PEER
      #      - GOPROXY

      installTimeout: 300s
      startuptimeout: 300s
      executetimeout: 30s
      mode: net
      keepalive: 0
      system:
        _lifecycle: enable
        cscc: enable
        lscc: enable
        escc: enable
        vscc: enable
        qscc: enable
      logging:
        level:  info
        shim:   warning
        format: '%{color}%{time:2006-01-02 15:04:05.000 MST} [%{module}] %{shortfunc} -> %{level:.4s} %{id:03x}%{color:reset} %{message}'
    ledger:
      blockchain:
      state:
        stateDatabase: goleveldb
        totalQueryLimit: 100000
        couchDBConfig:
          couchDBAddress: 127.0.0.1:5984
          username:
          password:
          maxRetries: 3
          maxRetriesOnStartup: 12
          requestTimeout: 35s
          internalQueryLimit: 1000
          maxBatchUpdateSize: 1000
          warmIndexesAfterNBlocks: 1
          createGlobalChangesDB: false
          cacheSize: 64
      history:
        enableHistoryDatabase: true
      pvtdataStore:
        collElgProcMaxDbBatchSize: 5000
        collElgProcDbBatchesInterval: 1000
    operations:
      listenAddress: 127.0.0.1:9443
      tls:
        enabled: false
        cert:
          file:
        key:
          file:
        clientAuthRequired: false
        clientRootCAs:
          files: []
    metrics:
      provider: disabled
      statsd:
        network: udp
        address: 127.0.0.1:8125
        writeInterval: 10s
        prefix:
