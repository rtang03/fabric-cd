apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: genesis-
  labels:
    workflows.argoproj.io/archive-strategy: "false"
spec:
  # must complete in 10 min (600 seconds)
  activeDeadlineSeconds: 600
  # keep workflows for 1d (3,600 seconds)
  ttlStrategy:
    secondsAfterCompletion: 3600
  # delete all pods as soon as they complete
  {{- if .Values.podGC }}
  podGC:
    strategy: OnPodCompletion
  {{- end }}
  serviceAccountName: workflow
  entrypoint: genesis-tmpl

  volumes:
    # helper shell script
    - name: setup-script
      configMap:
        name: orgadmin--setupsh
        defaultMode: 0777
    # pvc for organization's crypto-config
    - name: fabricfiles
      persistentVolumeClaim:
        claimName: {{ .Values.pvcName }}
    - name: configtx
      configMap:
        name: admin0-orgadmin--configtx

  templates:
    - name: genesis-tmpl
      inputs:
        artifacts:
          - name: org1mspcacerts
            path: /tmp/org1.net-cacert.pem
            s3:
              endpoint: storage.googleapis.com
              bucket: {{ .Values.bucket }}
              key: workflow/secrets/n1/org1.net-cacert/org1.net-ca-cert.pem
              accessKeySecret:
                name: gcp-s3-credentials
                key: accessKey
              secretKeySecret:
                name: gcp-s3-credentials
                key: secretKey
          - name: org1mspadmincerts
            path: /tmp/org1.net-admincert.pem
            s3:
              endpoint: storage.googleapis.com
              bucket: {{ .Values.bucket }}
              key: workflow/secrets/n1/org1.net-admincert/org1.net-admin-cert.pem
              accessKeySecret:
                name: gcp-s3-credentials
                key: accessKey
              secretKeySecret:
                name: gcp-s3-credentials
                key: secretKey
          - name: org1msptlscacerts
            path: /tmp/org1.net-tlscacert.pem
            s3:
              endpoint: storage.googleapis.com
              bucket: {{ .Values.bucket }}
              key: workflow/secrets/n1/org1.net-tlscacert/tlscacert.pem
              accessKeySecret:
                name: gcp-s3-credentials
                key: accessKey
              secretKeySecret:
                name: gcp-s3-credentials
                key: secretKey
      container:
        image: library/alpine:3.12.0
        command: ["sh", "-c"]
        workingDir: /var/hyperledger
        args:
          - |-
            . /script/setup.sh
            apk update
            apk upgrade
            apk --no-cache add libc6-compat libstdc++
            set -x
            mkdir -p /var/hyperledger/crypto-config/{{ .Values.mspId }}/msp/cacerts
            mkdir -p /var/hyperledger/crypto-config/{{ .Values.mspId }}/msp/admincerts
            mkdir -p /var/hyperledger/crypto-config/{{ .Values.mspId }}/msp/tlscacerts
            mkdir -p /tmp/data
            cat /tmp/org1.net-cacert.pem | base64 -d > /var/hyperledger/crypto-config/{{ .Values.mspId }}/msp/cacerts/org1.net-ca-cert.pem
            res=$?
            set +x
            printMessage "cp org1.net-ca-cert.pem" $res
            set -x
            cat /tmp/org1.net-admincert.pem | base64 -d > /var/hyperledger/crypto-config/{{ .Values.mspId }}/msp/admincerts/org1.net-admin-cert.pem
            res=$?
            set +x
            printMessage "cp org1.net-admin-cert.pem" $res
            set -x
            cat /tmp/org1.net-tlscacert.pem | base64 -d > /var/hyperledger/crypto-config/{{ .Values.mspId }}/msp/tlscacerts/org1.net-ca-cert.pem
            res=$?
            set +x
            printMessage "cp org1.net-ca-cert.pem" $res
            set -x
            ./bin/configtxgen -configPath ./cli/configtx -profile OrgsOrdererGenesis -outputBlock ./crypto-config/genesis.block -channelID ordererchannel >& ./crypto-config/create-genesis.log
            res=$?
            set +x
            cat ./crypto-config/create-genesis.log
            printMessage "create genesis block" $res
            set -x
            ./bin/configtxgen -configPath ./cli/configtx -profile OrgsChannel -outputCreateChannelTx ./crypto-config/channel.tx -channelID {{ .Values.channelID }} >& ./crypto-config/create-channeltx.log
            res=$?
            set +x
            cat ./crypto-config/create-channeltx.log
            printMessage "create channel.tx" $res
            if [ -f "./crypto-config/genesis.block" ]; then
              echo "genesis.block exists"
            else
              echo "genesis.block not found. ./crypto-config/create-genesis.log"
              exit 1
            fi
            if [ -f "./crypto-config/channel.tx" ]; then
              echo "channel.tx exists"
            else
              echo "channel.tx not found. Check ./crypto-config/create-channeltx.log"
              exit 1
            fi
            cp ./crypto-config/genesis.block /tmp/data
            cp ./crypto-config/channel.tx /tmp/data
            cp ./crypto-config/create-genesis.log /tmp/data
            cp ./crypto-config/create-channeltx.log /tmp/data
        volumeMounts:
          - mountPath: /var/hyperledger
            name: fabricfiles
          - name: setup-script
            mountPath: /script/setup.sh
            subPath: setup.sh
          - mountPath: /var/hyperledger/cli/configtx
            name: configtx
      outputs:
        artifacts:
          - name: genesis-block
            path: /tmp/data
            archive:
              none: {}
            s3:
              endpoint: storage.googleapis.com
              bucket: {{ .Values.bucket }}
              key: workflow/genesis
              accessKeySecret:
                name: gcp-s3-credentials
                key: accessKey
              secretKeySecret:
                name: gcp-s3-credentials
                key: secretKey
      metadata:
        annotations:
          sidecar.istio.io/inject: "false"


