apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: bootstrap-
  labels:
    workflows.argoproj.io/archive-strategy: "false"
spec:
  # must complete in 15 min (3600 seconds)
  activeDeadlineSeconds: 3600
  # delete all pods as soon as they complete
  # podGC:
  #   strategy: OnPodCompletion
  serviceAccountName: workflow
  # artifactRepositoryRef:
  #   key: gcp_dev
  entrypoint: channels
  {{- if .Values.hostAlias }}
  hostAliases:
  {{- range .Values.hostAlias }}
    - ip: {{ .ip}}
      hostnames:
        {{- range .hostnames }}
        - {{ . }}
        {{- end }}
  {{- end }}
  {{- end }}

  volumes:
   # binaries: peer, etc.
   - name: fabricfiles
     persistentVolumeClaim:
       claimName: {{ .Values.pvcName }}
   # setup.sh
   - name: setup-script
     configMap:
       name: "orgadmin--setupsh"
       defaultMode: 0777
   # core.yaml
   - name: core-yaml
     configMap:
       name: "core-yaml"
  {{- range .Values.secret }}
   - name: {{ .name }}
     secret:
       secretName: {{ .secret }}
  {{- end }}

  templates:
    - name: channels
      steps:
        {{- if .Values.bootstrap.tasks.create_channel.enabled }}
        - - name: create-channel
            template: create-channel-tmpl
        {{- end }}
        {{- if .Values.bootstrap.tasks.join_channel.enabled }}
        - - name: join-channel
            template: join-channel-tmpl
            arguments:
              artifacts:
                - name: channel-block
                  from: {{ .Values.alias.step_create_channel_outputs | quote }}
        {{- end }}
        {{- if .Values.bootstrap.tasks.update_anchor_peer.enabled }}
        - - name: update-anchor-peer
            template: update-anchor-tmpl
            continueOn:
              error: true
              failed: true
        {{- end }}
        {{- if .Values.bootstrap.tasks.package_install.enabled }}
        - - name: package-install
            template: package-cc-tmpl
        {{- end }}
        {{- if .Values.bootstrap.tasks.delete_ccid.enabled }}
        - - name: delete-chaincode-id
            template: del-ccid-tmpl
            continueOn:
              error: true
              failed: true
        {{- end }}
        {{- if .Values.bootstrap.tasks.create_ccid.enabled }}
        - - name: create-chaincode-id
            template: create-ccid-tmpl
            arguments:
              parameters:
                - name: packageid
                  value: {{ .Values.alias.step_package_outputs | quote }}
        {{- end }}
        {{- if .Values.bootstrap.tasks.approve_chaincode.enabled }}
        - - name: approve-chaincode
            template: approve-cc-tmpl
        {{- end }}
        {{- if .Values.bootstrap.tasks.commit_chaincode.enabled }}
        - - name: commit-chaincode
            template: commit-cc-tmpl
        {{- end }}
        {{- if .Values.bootstrap.tasks.dev_invoke.enabled }}
        - - name: dev-invoke
            template: dev-invoke-tmpl
        {{- end }}

    #####################
    ### create-channel-tmpl
    #####################
    - name: create-channel-tmpl
{{ toYaml .Values.no_istio | indent 6 }}
      inputs:
        artifacts:
          - name: channeltx
            path: /tmp/channel.tx
            s3:
              key: {{ .Values.keyChanneltx | quote }}
              {{- with .Values.s3 }}
{{ toYaml . | indent 14 }}
              {{- end }}
          - name: org0tlscacert
            path: /tmp/org0.com-tlscacert_encoded.pem
            s3:
              key: {{ .Values.keyOrg0Tlscacert | quote }}
              {{- with .Values.s3 }}
{{ toYaml . | indent 14 }}
              {{- end }}
      container:
        image: library/alpine:3.12.0
        command: ["sh", "-c"]
        workingDir: /var/hyperledger
        args:
          - |-
            . /script/setup.sh
            apk update
            apk upgrade
            apk --no-cache add libc6-compat libstdc++ tzdata
            # retrieve o0 tlscacert from artifact repo, and decode it
            cat /tmp/org0.com-tlscacert_encoded.pem | base64 -d > /tmp/org0.com-tlscacert.pem
            printHeader "Create channel"
            echo "Fetch block to see if channel has already been created..."
            set -x
            $BIN/peer channel fetch 0 -c $CHANNEL_NAME --tls --cafile $ORDERER_CA -o $ORDERER_URL /tmp/$CHANNEL_NAME.block
            set +x
            if [ -f "/tmp/$CHANNEL_NAME.block" ]
            then
              echo "Channel ${CHANNEL_NAME} is already created. create-channel skipped" | tee /tmp/createchannel.log
            else
              echo "Creating channel $CHANNEL_NAME"
              set -x
              $BIN/peer channel create -o $ORDERER_URL -c $CHANNEL_NAME -f /tmp/channel.tx --outputBlock /tmp/$CHANNEL_NAME.block --tls --cafile $ORDERER_CA >& /tmp/createchannel.log
              res=$?
              set +x
              cat /tmp/createchannel.log
              printMessage "generate $CHANNEL_NAME.block" $res
            fi
        env:
        {{- range .Values.conf }}
          - name: {{ .name }}
            value: {{ .value }}
        {{- end }}
        volumeMounts:
          - mountPath: /var/hyperledger
            name: fabricfiles
          - mountPath: /etc/hyperledger
            name: core-yaml
          - name: setup-script
            mountPath: /script/setup.sh
            subPath: setup.sh
          {{- range .Values.secret }}
          - name: {{ .name }}
            mountPath: /var/hyperledger/crypto-config/channel-artifacts/{{ .secret }}
          {{- end }}
      outputs:
        artifacts:
          - name: channel-block
            path: /tmp/
            archive:
              none: {}
            s3:
              key: workflow/{{ .Values.alias.workflow_name }}/{{ .Values.mspId | lower }}/create-channel/
              {{- with .Values.s3 }}
{{ toYaml . | indent 14 }}
              {{- end }}
    #####################
    ### join-channel-tmpl
    #####################
    - name: join-channel-tmpl
{{ toYaml .Values.no_istio | indent 6 }}
      inputs:
        artifacts:
          - name: channel-block
            path: /tmp/{{ .Values.channelName }}.block
            s3:
              key: workflow/{{ .Values.alias.workflow_name }}/{{ .Values.mspId | lower }}/create-channel/{{ .Values.channelName }}.block
              {{- with .Values.s3 }}
{{ toYaml . | indent 14 }}
              {{- end }}
      container:
        image: library/alpine:3.12.0
        command: ["sh", "-c"]
        workingDir: /var/hyperledger
        args:
          - |-
            . /script/setup.sh
            apk update
            apk upgrade
            apk --no-cache add libc6-compat libstdc++ jq tzdata
            printHeader "Join channel"
            sleep 1s
            set -x
            $BIN/peer channel getinfo -c $CHANNEL_NAME >& /tmp/getinfo.log
            res=$?
            set +x
            if [ $res = 1 ]; then
              set -x
              $BIN/peer channel join -b /tmp/$CHANNEL_NAME.block >& /tmp/joinchannel.log
              res=$?
              set +x
              cat /tmp/joinchannel.log
              printMessage "join channel" $res
            else
              echo "channel already joined. join-channel skipped" | tee /tmp/joinchannel.log
            fi
        env:
          {{- range .Values.conf }}
          - name: {{ .name }}
            value: {{ .value }}
          {{- end }}
        volumeMounts:
          - mountPath: /var/hyperledger
            name: fabricfiles
          - mountPath: /etc/hyperledger
            name: core-yaml
          - name: setup-script
            mountPath: /script/setup.sh
            subPath: setup.sh
          {{- range .Values.secret }}
          - name: {{ .name }}
            mountPath: /var/hyperledger/crypto-config/channel-artifacts/{{ .secret }}
          {{- end }}
      outputs:
        artifacts:
          - name: join-channel-log
            path: /tmp/
            archive:
              none: {}
            s3:
              key: workflow/{{ .Values.alias.workflow_name }}/{{ .Values.mspId | lower }}/join-channel/
              {{- with .Values.s3 }}
{{ toYaml . | indent 14 }}
              {{- end }}
    #####################
    ### update-anchor-tmpl
    #####################
    - name: update-anchor-tmpl
{{ toYaml .Values.no_istio | indent 6 }}
      inputs:
        artifacts:
          - name: org0tlscacert
            path: /tmp/org0.com-tlscacert_encoded.pem
            s3:
              key: {{ .Values.keyOrg0Tlscacert | quote }}
              {{- with .Values.s3 }}
{{ toYaml . | indent 14 }}
              {{- end }}
      container:
        image: library/alpine:3.12.0
        command: ["sh", "-c"]
        workingDir: /var/hyperledger
        args:
          - |-
            . /script/setup.sh
            apk update
            apk upgrade
            apk --no-cache add libc6-compat libstdc++ jq tzdata
            cat /tmp/org0.com-tlscacert_encoded.pem | base64 -d > /tmp/org0.com-tlscacert.pem
            printHeader "Update anchor peer"
            set -x
            $BIN/peer channel fetch config /tmp/config_block.pb -o $ORDERER_URL -c $CHANNEL_NAME --tls --cafile $ORDERER_CA >& /tmp/fetchconfig.log
            res=$?
            set +x
            printMessage "fetch config_block.pb" $res
            cat /tmp/fetchconfig.log
            set -x
            $BIN/configtxlator proto_decode --input /tmp/config_block.pb --type common.Block --output /tmp/config_block.json
            res=$?
            set +x
            printMessage "decode block0" $res
            set -x
            jq .data.data[0].payload.data.config /tmp/config_block.json > /tmp/config.json
            res=$?
            set +x
            printMessage "jq extract channel" $res
            set -x
            cp /tmp/config.json /tmp/config_copy.json
            res=$?
            set +x
            printMessage "cp block" $res
            set -x
            jq ".channel_group.groups.Application.groups.{{ .Values.mspId }}.values += {\"AnchorPeers\":{\"mod_policy\":\"Admins\",\"value\":{\"anchor_peers\":[{\"host\":\"{{ .Values.bootstrap.tasks.update_anchor_peer.host }}\",\"port\":{{ .Values.bootstrap.tasks.update_anchor_peer.port }}}]},\"version\":\"0\"}}" /tmp/config_copy.json > /tmp/modified_config.json
            res=$?
            set +x
            printMessage "jq add anchorpeer" $res
            set -x
            $BIN/configtxlator proto_encode --input /tmp/config.json --type common.Config --output /tmp/config.pb
            res=$?
            set +x
            printMessage "encode current block" $res
            set -x
            $BIN/configtxlator proto_encode --input /tmp/modified_config.json --type common.Config --output /tmp/modified_config.pb
            res=$?
            set +x
            printMessage "encode new block" $res
            set -x
            $BIN/configtxlator compute_update --channel_id $CHANNEL_NAME --original /tmp/config.pb --updated /tmp/modified_config.pb --output /tmp/config_update.pb
            res=$?
            set +x
            # NOTE: if the anchor peer is already made, the compute_update will return below error:
            # "configtxlator: error: Error computing update: error computing config update: no differences detected between original and updated config"
            printMessage "compute update block" $res
            set -x
            $BIN/configtxlator proto_decode --input /tmp/config_update.pb --type common.ConfigUpdate --output /tmp/config_update.json
            res=$?
            set +x
            printMessage "decode update block" $res
            echo "{\"payload\":{\"header\":{\"channel_header\":{\"channel_id\":\"$CHANNEL_NAME\", \"type\":2}},\"data\":{\"config_update\":$(cat /tmp/config_update.json)}}}" | jq . > /tmp/config_update_in_envelope.json
            res=$?
            set +x
            printMessage "create update_envelope" $res
            set -x
            $BIN/configtxlator proto_encode --input /tmp/config_update_in_envelope.json --type common.Envelope --output /tmp/config_update_in_envelope.pb
            res=$?
            set +x
            printMessage "encode update_envelope" $res
            set -x
            $BIN/peer channel update -f /tmp/config_update_in_envelope.pb -o $ORDERER_URL -c $CHANNEL_NAME --tls --cafile $ORDERER_CA >& /tmp/updateanchorpeer.log
            res=$?
            set +x
            printMessage "send update_envelope proposal" $res
            cat /tmp/updateanchorpeer.log
        env:
          {{- range .Values.conf }}
          - name: {{ .name }}
            value: {{ .value }}
          {{- end }}
        volumeMounts:
          - mountPath: /var/hyperledger
            name: fabricfiles
          - mountPath: /etc/hyperledger
            name: core-yaml
          - name: setup-script
            mountPath: /script/setup.sh
            subPath: setup.sh
          {{- range .Values.secret }}
          - name: {{ .name }}
            mountPath: /var/hyperledger/crypto-config/channel-artifacts/{{ .secret }}
          {{- end }}
      outputs:
        artifacts:
          - name: update-anchor-peer
            path: /tmp/
            archive:
              none: {}
            s3:
              key: workflow/{{ .Values.alias.workflow_name }}/{{ .Values.mspId | lower }}/update-anchor/
              {{- with .Values.s3 }}
{{ toYaml . | indent 14 }}
              {{- end }}
    #####################
    ### package-cc-tmpl
    #####################
    - name: package-cc-tmpl
{{ toYaml .Values.no_istio | indent 6 }}
      inputs:
        artifacts:
          - name: org0tlscacert
            path: /tmp/org0.com-tlscacert_encoded.pem
            s3:
              key: {{ .Values.keyOrg0Tlscacert | quote }}
              {{- with .Values.s3 }}
{{ toYaml . | indent 14 }}
              {{- end }}
          - name: collection-json
            path: /builders/packaging/connection.json
            raw:
              data: {{ .Values.connection_json | quote }}
          - name: metadata-json
            path: /builders/packaging/metadata.json
            raw:
              data: |
                {{ .Values.metadata_json }}
      container:
        image: library/alpine:3.12.0
        command: ["sh", "-c"]
        workingDir: /tmp
        args:
          - |-
            . /script/setup.sh
            apk update
            apk upgrade
            apk --no-cache add libc6-compat libstdc++ tzdata
            cat /tmp/org0.com-tlscacert_encoded.pem | base64 -d > /tmp/org0.com-tlscacert.pem
            printHeader "package chaincode"
            if [ -f "/builders/packaging/connection.json" ]; then
              echo "/builders/packaging/connection.json found"
            else
              printMessage "connection.json not found" -1
            fi
            if [ -f "/builders/packaging/metadata.json" ]; then
              echo "/builders/packaging/metadata.json found"
            else
              printMessage "metadata.json not found" -1
            fi
            set -x
            cp /builders/packaging/connection.json .
            res=$?
            set +x
            printMessage "copy connection.json" $res
            set -x
            cp /builders/packaging/metadata.json .
            res=$?
            set +x
            printMessage "copy metadata.json" $res
            set -x
            tar cfz code.tar.gz connection.json
            res=$?
            set +x
            printMessage "tar code.tar.gz" $res
            set -x
            tar cfz {{ .Values.bootstrap.chaincode.id }}.tgz code.tar.gz metadata.json
            res=$?
            set +x
            printMessage "package chaincode" $res
            printHeader "queryinstalled"
            set -x
            $BIN/peer lifecycle chaincode queryinstalled >& /tmp/installed.log
            res=$?
            set +x
            cat /tmp/installed.log
            # NOTE: currently, this installation assumes one chaincode per channel. If later, more chaincode
            # is required per channel, below logic need modify
            grep -q eventstore /tmp/installed.log
            res=$?
            if [ $res = 0 ]; then
              echo "chaincode already installed"
              set -x
              sed -n "/{{ .Values.bootstrap.chaincode.id }}v{{ .Values.bootstrap.chaincode.version }}/{s/^Package ID: //; s/, Label:.*$//; p;}" /tmp/installed.log > /tmp/packageid.txt
              res=$?
              set +x
              cat /tmp/packageid.txt
              printMessage "1: make packageid.txt" $res
            else
              echo "installation will take a few minutes"
              $BIN/peer lifecycle chaincode install /tmp/{{ .Values.bootstrap.chaincode.id }}.tgz >& /tmp/installcc.log
              res=$?
              set +x
              cat /tmp/installcc.log
              printMessage "install chaincode" $res
              set -x
              $BIN/peer lifecycle chaincode queryinstalled >& /tmp/installed.log
              sed -n "/{{ .Values.bootstrap.chaincode.id }}v{{ .Values.bootstrap.chaincode.version }}/{s/^Package ID: //; s/, Label:.*$//; p;}" /tmp/installed.log > /tmp/packageid.txt
              res=$?
              set +x
              cat /tmp/packageid.txt
              printMessage "2: make packageid.txt" $res
            fi
            # ensure packageid.txt is valid
            [ -s /tmp/packageid.txt ]
            res=$?
            if [ $res = 0 ]; then
              cat /tmp/packageid.txt
            else
              echo "packageid.txt is empty"
              exit 1
            fi
        env:
          {{- range .Values.conf }}
          - name: {{ .name }}
            value: {{ .value }}
          {{- end }}
        volumeMounts:
          - mountPath: /var/hyperledger
            name: fabricfiles
          - mountPath: /etc/hyperledger
            name: core-yaml
          - name: setup-script
            mountPath: /script/setup.sh
            subPath: setup.sh
          {{- range .Values.secret }}
          - name: {{ .name }}
            mountPath: /var/hyperledger/crypto-config/channel-artifacts/{{ .secret }}
          {{- end }}
      outputs:
        parameters:
          - name: packageid
            valueFrom:
              path: /tmp/packageid.txt
        artifacts:
          - name: chaincode
            path: /tmp/
            archive:
              none: {}
            s3:
              key: workflow/{{ .Values.alias.workflow_name }}/{{ .Values.mspId | lower }}/package-cc
              {{- with .Values.s3 }}
{{ toYaml . | indent 14 }}
              {{- end }}
    #####################
    ### del-ccid-tmpl
    #####################
    - name: del-ccid-tmpl
{{ toYaml .Values.no_istio | indent 6 }}
      resource:
        action: delete
        manifest: |
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: "chaincode-ccid"
    #####################
    ### create-ccid-tmpl
    #####################
    - name: create-ccid-tmpl
{{ toYaml .Values.no_istio | indent 6 }}
      inputs:
        parameters:
          - name: packageid
      resource:
        action: create
        manifest: |
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: "chaincode-ccid"
          data:
            CHAINCODE_CCID: {{ .Values.alias.input_packageid | quote }}
    #####################
    ### approve-cc-tmpl
    #####################
    - name: approve-cc-tmpl
{{ toYaml .Values.no_istio | indent 6 }}
      inputs:
        artifacts:
          - name: org0tlscacert
            path: /tmp/org0.com-tlscacert_encoded.pem
            s3:
              key: {{ .Values.keyOrg0Tlscacert | quote }}
              {{- with .Values.s3 }}
{{ toYaml . | indent 14 }}
              {{- end }}
      container:
        image: library/alpine:3.12.0
        command: ["sh", "-c"]
        workingDir: /var/hyperledger
        args:
          - |-
            . /script/setup.sh
            apk update
            apk upgrade
            apk --no-cache add libc6-compat libstdc++ tzdata
            # decode org0 tlscacert
            cat /tmp/org0.com-tlscacert_encoded.pem | base64 -d > /tmp/org0.com-tlscacert.pem
            more /tmp/org0.com-tlscacert.pem
            set -x
            $BIN/peer lifecycle chaincode queryapproved -C $CHANNEL_NAME -n {{ .Values.bootstrap.chaincode.id }}
            res=$?
            set +x
            if [ $res = 0 ]; then
              echo "queryapproved successful. approve-chaincode skipped."
              exit 0
            else
              echo "fail to queryapproved"
            fi
            printHeader "approve chaincode"
            echo "package-id: $CHAINCODE_CCID"
            if [ $CHAINCODE_CCID = "" ]; then
              echo "CHAINCODE_CCID is empty, exit(1)"
              exit 1
            fi
            set -x
            # Note: signature-policy is not currently used
            $BIN/peer lifecycle chaincode approveformyorg -o $ORDERER_URL -C $CHANNEL_NAME \
              --tls --cafile $ORDERER_CA --name {{ .Values.bootstrap.chaincode.id }} \
            {{- if .Values.bootstrap.tasks.approve_chaincode.signaturePolicy }}
              --signature-policy {{ .Values.bootstrap.tasks.approve_chaincode.signaturePolicy }} \
            {{- end }}
              --version {{ .Values.bootstrap.chaincode.version }} --package-id $CHAINCODE_CCID \
              --init-required --sequence {{ .Values.bootstrap.tasks.approve_chaincode.sequence }} \
              --waitForEvent >& /tmp/approvecc.log
            res=$?
            set +x
            cat  /tmp/approvecc.log
            printMessage "approve chaincode" $res
            printHeader "queryapproved"
            set -x
            $BIN/peer lifecycle chaincode queryapproved -C $CHANNEL_NAME -n {{ .Values.bootstrap.chaincode.id }} >& /tmp/queryapproved.log
            res=$?
            set +x
            cat /tmp/queryapproved.log
            printMessage "queryapproved" $res
        env:
          {{- range .Values.conf }}
          - name: {{ .name }}
            value: {{ .value }}
          {{- end }}
        envFrom:
          - configMapRef:
              name: "chaincode-ccid"
        volumeMounts:
          - mountPath: /var/hyperledger
            name: fabricfiles
          - mountPath: /etc/hyperledger
            name: core-yaml
          - name: setup-script
            mountPath: /script/setup.sh
            subPath: setup.sh
          {{- range .Values.secret }}
          - name: {{ .name }}
            mountPath: /var/hyperledger/crypto-config/channel-artifacts/{{ .secret }}
      {{- end }}
      outputs:
        artifacts:
          - name: approve-cc
            path: /tmp/
            archive:
              none: {}
            s3:
              key: workflow/{{ .Values.alias.workflow_name }}/{{ .Values.mspId | lower }}/approve-cc/
              {{- with .Values.s3 }}
{{ toYaml . | indent 14 }}
              {{- end }}
    #####################
    ### commit-cc-tmpl
    #####################
    - name: commit-cc-tmpl
{{ toYaml .Values.no_istio | indent 6 }}
      inputs:
        artifacts:
          - name: org0tlscacert
            path: /tmp/org0.com-tlscacert_encoded.pem
            s3:
              key: {{ .Values.keyOrg0Tlscacert | quote }}
              {{- with .Values.s3 }}
{{ toYaml . | indent 14 }}
              {{- end }}
      container:
        image: library/alpine:3.12.0
        command: ["sh", "-c"]
        workingDir: /var/hyperledger
        args:
          - |-
            . /script/setup.sh
            apk update
            apk upgrade
            apk --no-cache add libc6-compat libstdc++ tzdata
            cat /tmp/org0.com-tlscacert_encoded.pem | base64 -d > /tmp/org0.com-tlscacert.pem
            printHeader "checkcommitreadiness"
            set -x
            $BIN/peer lifecycle chaincode checkcommitreadiness \
              -o $ORDERER_URL -C $CHANNEL_NAME --tls --cafile $ORDERER_CA \
              --name {{ .Values.bootstrap.chaincode.id }} --version {{ .Values.bootstrap.chaincode.version }} \
              --init-required --sequence {{ .Values.bootstrap.tasks.commit_chaincode.sequence }} >& /tmp/commitreadiness.log
            res=$?
            set +x
            cat /tmp/commitreadiness.log
            printMessage "checkcommitreadiness" $res
            printHeader "commit chaincode"
            set -x
            $BIN/peer lifecycle chaincode commit \
              -o $ORDERER_URL -C $CHANNEL_NAME --tls --cafile $ORDERER_CA \
              --name {{ .Values.bootstrap.chaincode.id }} --version {{ .Values.bootstrap.chaincode.version }} \
              --init-required --sequence {{ .Values.bootstrap.tasks.commit_chaincode.sequence }} \
            {{- range .Values.bootstrap.tasks.commit_chaincode.targets }}
              --peerAddresses {{ .peerAddress }} \
              --tlsRootCertFiles {{ .tlsRootCertFiles }} \
            {{- end }}
              --waitForEvent >& /tmp/commitcc.log
            res=$?
            set +x
            cat /tmp/commitcc.log
            printMessage "commit chaincode" $res
            printHeader "querycommitted chaincode"
            set -x
            $BIN/peer lifecycle chaincode querycommitted \
              -o $ORDERER_URL -C $CHANNEL_NAME --tls --cafile $ORDERER_CA \
            {{- range .Values.bootstrap.tasks.commit_chaincode.targets }}
              --peerAddresses {{ .peerAddress }} \
              --tlsRootCertFiles {{ .tlsRootCertFiles }} \
            {{- end }}
              --name {{ .Values.bootstrap.chaincode.id }} >& /tmp/querycommitted.log
            res=$?
            set +x
            cat /tmp/querycommitted.log
            printMessage "querycommitted chaincode" $res
            printHeader "init chaincode"
            set -x
            $BIN/peer chaincode invoke --isInit \
              -o $ORDERER_URL -C $CHANNEL_NAME --tls --cafile $ORDERER_CA \
              --name {{ .Values.bootstrap.chaincode.id }} -c '{"Args":["Init"]}' \
            {{- range .Values.bootstrap.tasks.commit_chaincode.targets }}
              --peerAddresses {{ .peerAddress }} \
              --tlsRootCertFiles {{ .tlsRootCertFiles }} \
            {{- end }}
              --waitForEvent >& /tmp/initcc.log
            res=$?
            set +x
            cat /tmp/initcc.log
            printMessage "init chaincode" $res
        env:
          {{- range .Values.conf }}
          - name: {{ .name }}
            value: {{ .value }}
          {{- end }}
        volumeMounts:
          - mountPath: /var/hyperledger
            name: fabricfiles
          - mountPath: /etc/hyperledger
            name: core-yaml
          - name: setup-script
            mountPath: /script/setup.sh
            subPath: setup.sh
          {{- range .Values.secret }}
          - name: {{ .name }}
            mountPath: /var/hyperledger/crypto-config/channel-artifacts/{{ .secret }}
      {{- end }}
      outputs:
        artifacts:
          - name: commit-cc
            path: /tmp/
            archive:
              none: {}
            s3:
              key: workflow/{{ .Values.alias.workflow_name }}/{{ .Values.mspId | lower }}/commit-cc/
              {{- with .Values.s3 }}
{{ toYaml . | indent 14 }}
              {{- end }}
    #####################
    ### dev-invoke-tmpl
    #####################
    - name: dev-invoke-tmpl
{{ toYaml .Values.no_istio | indent 6 }}
      inputs:
        artifacts:
          - name: org0tlscacert
            path: /tmp/org0.com-tlscacert_encoded.pem
            s3:
              key: {{ .Values.keyOrg0Tlscacert | quote }}
              {{- with .Values.s3 }}
{{ toYaml . | indent 14 }}
              {{- end }}
      container:
        image: library/alpine:3.12.0
        command: ["sh", "-c"]
        workingDir: /var/hyperledger
        args:
          - |-
            . /script/setup.sh
            apk update
            apk upgrade
            apk --no-cache add libc6-compat libstdc++ tzdata
            cat /tmp/org0.com-tlscacert_encoded.pem | base64 -d > /tmp/org0.com-tlscacert.pem
            printHeader "dev-invoke"
            set -x
            $BIN/peer chaincode invoke -o $ORDERER_URL -C $CHANNEL_NAME --tls --cafile $ORDERER_CA --name {{ .Values.bootstrap.chaincode.id }} \
              -c '{"Args":["createCommit", "dev_entity", "ent_dev", "0","[]", "ent_dev"]}' \
            {{- range .Values.bootstrap.tasks.dev_invoke.targets }}
              --peerAddresses {{ .peerAddress }} \
              --tlsRootCertFiles {{ .tlsRootCertFiles }} \
            {{- end }}
              --waitForEvent --waitForEventTimeout 300s >& /tmp/devinvoke.log
            res=$?
            set +x
            cat /tmp/devinvoke.log
            printMessage "dev-invoke" $res
            printHeader "dev-query"
            set -x
            $BIN/peer chaincode query -C $CHANNEL_NAME --tls --cafile $ORDERER_CA --name {{ .Values.bootstrap.chaincode.id }} \
              -c '{"Args":["eventstore:queryByEntityName","dev_entity"]}' >& /tmp/devquery.log
            res=$?
            set +x
            cat /tmp/devquery.log
            printMessage "dev-query" $res
        env:
          {{- range .Values.conf }}
          - name: {{ .name }}
            value: {{ .value }}
          {{- end }}
        volumeMounts:
          - mountPath: /var/hyperledger
            name: fabricfiles
          - mountPath: /etc/hyperledger
            name: core-yaml
          - name: setup-script
            mountPath: /script/setup.sh
            subPath: setup.sh
          {{- range .Values.secret }}
          - name: {{ .name }}
            mountPath: /var/hyperledger/crypto-config/channel-artifacts/{{ .secret }}
      {{- end }}
      outputs:
        artifacts:
          - name: dev-invoke
            path: /tmp/
            archive:
              none: {}
            s3:
              key: workflow/{{ .Values.alias.workflow_name }}/{{ .Values.mspId | lower }}/dev-invoke/
              {{- with .Values.s3 }}
{{ toYaml . | indent 14 }}
              {{- end }}
