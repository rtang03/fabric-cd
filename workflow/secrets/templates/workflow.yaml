apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: create-secrets-
spec:
  # must complete in 1 min (600 seconds)
  activeDeadlineSeconds: 600
  # delete all pods as soon as they complete
  # should not disable podGC
{{/*  podGC:*/}}
{{/*    strategy: OnPodCompletion*/}}
  # IMPORTANT: The workflow information about secret creation is made as short time as possible
  ttlStrategy:
    secondsAfterCompletion: 300 # Time to live after workflow is completed, replaces ttlSecondsAfterFinished
    secondsAfterSuccess: 600     # Time to live after workflow is successful
    secondsAfterFailure: 600     # Time to live after workflow fails
  serviceAccountName: workflow
  entrypoint: create-secrets-tmpl
  volumes:
    - name: fabricfiles
      persistentVolumeClaim:
        claimName: {{ .Values.pvc }}

  templates:
    - name: create-secrets-tmpl
      steps:
        - - name: get-files
            template: get-files
            arguments:
              parameters:
                - name: secretName
                  value: {{ .Values.itemAlias.secretName | quote }}
                - name: isTls
                  value: {{ .Values.itemAlias.isTls | quote }}
                - name: key1
                  value: {{ .Values.itemAlias.key1 | quote }}
                - name: path1
                  value: {{ .Values.itemAlias.path1 | quote }}
                - name: key2
                  value: {{ .Values.itemAlias.key2 | quote }}
                - name: path2
                  value: {{ .Values.itemAlias.path2 | quote }}
            withItems:
            {{- range .Values.items }}
              - { secretName: {{ .secretName }}, isTls: {{ .isTls }}, key1: {{ .key1 }}, path1: {{ .path1 }}, key2: {{ .key2 | default "" }}, path2: {{ .path2 | default ""}} }
            {{- end }}
        - - name: del
            templateRef:
              name: secret-resource
              template: delete-secret-tmpl
              clusterScope: false
            arguments:
              parameters:
                - name: secretName
                  value: {{ .Values.itemAlias.secretName | quote }}
            withParam: {{ .Values.itemAlias.getOutput | quote }}
            continueOn:
              error: true
              failed: true
        - - name: create-1
            templateRef:
              name: secret-resource
              template: create-secret-1key-tmpl
              clusterScope: false
            arguments:
              parameters:
                - name: secretName
                  value: {{ .Values.itemAlias.secretName | quote }}
                - name: key1
                  value: {{ .Values.itemAlias.key1 | quote }}
                - name: value1
                  value: {{ .Values.itemAlias.value1 | quote }}
            withParam: {{ .Values.itemAlias.getOutput | quote }}
            when: "{{ .Values.itemAlias.isTls }} != true"
          - name: create-2
            templateRef:
              name: secret-resource
              template: create-secret-2key-tmpl
              clusterScope: false
            arguments:
              parameters:
                - name: secretName
                  value: {{ .Values.itemAlias.secretName | quote }}
                - name: key1
                  value: {{ .Values.itemAlias.key1 | quote }}
                - name: value1
                  value: {{ .Values.itemAlias.value1 | quote }}
                - name: key2
                  value: {{ .Values.itemAlias.key2 | quote }}
                - name: value2
                  value: {{ .Values.itemAlias.value2 | quote }}
            withParam: {{ .Values.itemAlias.getOutput | quote }}
            when: "{{ .Values.itemAlias.isTls }} == true"
    - name: get-files
{{ toYaml .Values.no_istio | indent 6 }}
      synchronization:
        semaphore:
          configMapKeyRef:
            name: orgadmin--cli
            key: template
      inputs:
        parameters:
          - name: secretName
          - name: key1
          - name: key2
          - name: path1
          - name: path2
          - name: isTls
      container:
        image: library/alpine:3.12.0
        command: ["sh", "-c"]
        workingDir: /var/hyperledger/crypto-config
        args:
          - |-
            # temp secrets for outputs.parameters
            mkdir -p /tmp/{{ .Values.inputAlias.secretName | quote }}
            # temp secrets for outputs.artifacts
            mkdir -p /tmp/artifacts/{{ .Values.inputAlias.secretName | quote }}
            set -x
            if [ -f {{ .Values.inputAlias.path1 | quote }} ]; then
              echo "key1: {{ .Values.inputAlias.path1 | quote }} found"
              cat {{ .Values.inputAlias.path1 | quote }} | base64 > /tmp/{{ .Values.inputAlias.secretName }}/{{ .Values.inputAlias.key1 }}
              cat {{ .Values.inputAlias.path1 | quote }} | base64 > /tmp/artifacts/{{ .Values.inputAlias.secretName }}/{{ .Values.inputAlias.key1 }}
            else
              echo "key1: {{ .Values.inputAlias.path1 | quote }} not found, exiting... Please check it, and retry"
              exit 1
            fi
            if [ "{{ .Values.inputAlias.isTls }}" == "true" ]; then
              if [ -f "{{ .Values.inputAlias.path2 | quote }}" ]; then
                echo "key2: {{ .Values.inputAlias.path2 | quote }} found"
                cat {{ .Values.inputAlias.path2 | quote }} | base64 > /tmp/{{ .Values.inputAlias.secretName }}/{{ .Values.inputAlias.key2 }}
                cat {{ .Values.inputAlias.path2 | quote }} | base64 > /tmp/artifacts/{{ .Values.inputAlias.secretName }}/{{ .Values.inputAlias.key2 }}
              else
                echo "key2: {{ .Values.inputAlias.path2 | quote }} not found, exiting... Please check it, and retry"
                exit 1
              fi
            else
              # even there is no key2, create a dummy file; avoid "outputs.parameters" to fail.
              # btw, the dummy file is not required in the outputs.artifacts
              touch /tmp/{{ .Values.inputAlias.secretName | quote }}/null
            fi
            set +x
            echo "encoded files saved"
        volumeMounts:
          - mountPath: /var/hyperledger
            name: fabricfiles
        resources:
          limits:
            cpu: 10m
            memory: 64Mi
      outputs:
        artifacts:
          - name: secret
            path: /tmp/artifacts/{{ .Values.inputAlias.secretName | quote }}
            archive:
              none: {}
            s3:
              endpoint: storage.googleapis.com
              bucket: {{ .Values.bucket }}
              key: workflow/secrets/{{ .Values.workflowAlias.namespace }}/{{ .Values.inputAlias.secretName }}
              accessKeySecret:
                name: gcp-s3-credentials
                key: accessKey
              secretKeySecret:
                name: gcp-s3-credentials
                key: secretKey
        parameters:
          - name: secretName
            value: {{ .Values.inputAlias.secretName | quote }}
          - name: isTls
            value: {{ .Values.inputAlias.isTls | quote }}
          - name: key1
            value: {{ .Values.inputAlias.key1 | quote }}
          - name: value1
            valueFrom:
              path: /tmp/{{ .Values.inputAlias.secretName | quote }}/{{ .Values.inputAlias.key1 | quote }}
          - name: key2
            value: {{ .Values.inputAlias.key2 | default "" | quote }}
          - name: value2
            valueFrom:
              path: /tmp/{{ .Values.inputAlias.secretName | quote }}/{{ .Values.inputAlias.key2 | quote }}
