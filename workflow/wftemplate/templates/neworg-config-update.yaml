{{- if eq .Values.clusterscope false }}
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: neworg-config-update
spec:
  activeDeadlineSeconds: 600
  # podGC:
  #   strategy: OnPodCompletion
  ttlStrategy:
    secondsAfterCompletion: 3600 # Time to live after workflow is completed, replaces ttlSecondsAfterFinished
    secondsAfterSuccess: 3600     # Time to live after workflow is successful
    secondsAfterFailure: 3600     # Time to live after workflow fails
  serviceAccountName: workflow
  entrypoint: main

  templates:
    - name: main
      inputs:
        parameters:
          - name: cacert
          - name: outfile
          - name: url
      steps:
        - - name: neworg
            template: neworg-tmpl
        - - name: gupload
            templateRef:
              name: gupload-up-file
              template: upload-tmpl
              clusterScope: true
            arguments:
              parameters:
                - name: cacert
                  value: {{ .Values.alias.input_cacert | quote }}
                - name: url
                  value: {{ .Values.alias.input_url | quote }}
                - name: infile
                  value: "config.json"
                - name: outfile
                  value: {{ .Values.alias.input_outfile | quote }}
                - name: pvc_gupload
                  value: {{ .Values.pvc_gupload }}

    - name: neworg-tmpl
{{ toYaml .Values.no_istio | indent 6 }}
      volumes:
        - name: gupload
          persistentVolumeClaim:
            claimName: {{ .Values.pvc_gupload }}
        - name: fabricfiles
          persistentVolumeClaim:
            claimName: {{ .Values.pvc_fabricfiles }}
        - name: setup-script
          configMap:
            name: "orgadmin--setupsh"
            defaultMode: 0755
        - name: core-yaml
          configMap:
            name: core-yaml
        - name: configtx-yaml
          configMap:
            name: orgadmin--configtx
        - name: org0-tlscacert
          secret:
            secretName: org0.com-tlscacert
      container:
        image: library/alpine:3.12.0
        command: ["sh", "-c"]
        workingDir: /var/hyperledger
        args:
          - |-
            FABRIC_CFG_PATH=/etc/hyperledger
            . /script/setup.sh
            apk update
            apk upgrade
            apk --no-cache add libc6-compat libstdc++ jq
            ./bin/peer version
            ### check config.json exists
            if [ -f /var/hyperledger/uploaded/{{ .Values.neworgSend.channelConfg }} ]
            then
              echo "config.json exists"
            else
              echo "error: config.json not exists"
              exit -1
            fi
            ########
            # Step 0: prepare tmp dir
            ########
            export TMP={{ .Values.global.workingDir }}/uploaded/tmp/{{include "hlf-operator.fullname" .}}
            set -x
            rm -r $TMP
            mkdir -p $TMP
            set +x
            ########
            # Step 1: generate channel definition
            ########
            printHeader "generate channel definition"
            set -x
            $BIN/configtxgen -configPath /configtx -printOrg {{ .Values.global.mspId }} > $TMP/{{ .Values.global.mspId }}-configtx.json
            res=$?
            set +x
            printMessage "generate channel definition" $res
            ########
            # Step 2: modify config to append new org
            ########
            printHeader "Modify config to append new org: {{ .Values.global.mspId }}"
            set -x
            jq -s '.[0] * {"channel_group":{"groups":{"Application":{"groups": {"{{ .Values.global.mspId }}":.[1]}}}}}' \
              /var/hyperledger/uploaded/{{ .Values.neworgSend.channelConfg }} \
              $TMP/{{ .Values.global.mspId }}-configtx.json > $TMP/modified_config.json
            res=$?
            set +x
            printMessage "modify config to append new org: {{ .Values.global.mspId }}" $res
            ########
            # Step 3: encode config.json to config.pb
            ########
            printHeader "Encode current block: config.json to config.pb"
            set -x
            $BIN/configtxlator proto_encode --input /var/hyperledger/uploaded/{{ .Values.neworgSend.channelConfg }} \
              --type common.Config --output $TMP/config.pb
            res=$?
            set +x
            printMessage "encode config.json to config.pb" $res
            ########
            # Step 4: encode modified_config.json to modified_config.pb
            ########
            printHeader "Encode new block: modified_config.json to modified_config.pb"
            set -x
            $BIN/configtxlator proto_encode --input $TMP/modified_config.json --type common.Config --output $TMP/modified_config.pb
            res=$?
            set +x
            printMessage "encode modified_config.json to modified_config.pb" $res
            ########
            # Step 5: compute update block
            ########
            printHeader "Compute update block"
            set -x
            $BIN/configtxlator compute_update --channel_id $CHANNEL_NAME --original $TMP/config.pb --updated $TMP/modified_config.pb --output $TMP/config_update.pb
            res=$?
            set +x
            printMessage "compute update block" $res
            ########
            # Step 6: decode update block
            ########
            printHeader "Decode update block"
            set -x
            $BIN/configtxlator proto_decode --input $TMP/config_update.pb --type common.ConfigUpdate | jq . > $TMP/config_update.json
            res=$?
            set +x
            printMessage "decode update block" $res
            ########
            # Step 7: create update_envelope
            ########
            printHeader "Create update_envelope"
            echo "{\"payload\":{\"header\":{\"channel_header\":{\"channel_id\":\"$CHANNEL_NAME\", \"type\":2}},\"data\":{\"config_update\":$(cat $TMP/config_update.json)}}}" | jq . > $TMP/config_update_in_envelope.json
            set -x
            res=$?
            set +x
            printMessage "create update_envelope" $res
            ########
            # Step 8: encode update_envelope
            ########
            printHeader "Encode update_envelope"
            set -x
            $BIN/configtxlator proto_encode --input $TMP/config_update_in_envelope.json --type common.Envelope --output $TMP/config_update_in_envelope.pb
            res=$?
            set +x
            printMessage "encode update_envelope" $res
        env:
          - name: ORDERER_URL
            value: {{ .Values.ordererUrl }}
        envFrom:
          - configMapRef:
              name: orgadmin--cli
        volumeMounts:
          - mountPath: /mnt
            name: gupload
          - mountPath: /var/hyperledger
            name: fabricfiles
          - name: setup-script
            mountPath: /script/setup.sh
            subPath: setup.sh
          - name: configtx-yaml
            mountPath: /configtx
          - mountPath: /etc/hyperledger
            name: core-yaml
          - mountPath: /tmp/tlscacert.pem
            name: org0-tlscacert
  {{- end }}
